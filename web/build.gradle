buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.qameta.allure:allure-gradle:2.8.1"
        classpath 'com.adarshr:gradle-test-logger-plugin:2.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}


plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'io.qameta.allure' version '2.8.1'
    id 'com.adarshr.test-logger' version '2.1.1'
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'com.github.johnrengelman.shadow'

group 'com.holeaf'
version '0.1.0'
mainClassName = "io.ktor.server.jetty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}
ext {
    allureVersion = '2.13.7'
    junitVersion = '5.7.0'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

shadowJar {
    manifest {
        attributes 'Main-Class': "io.ktor.server.jetty.EngineMain"
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/services'
        include 'org.eclipse.jetty.http.HttpFieldPreEncoder'
    }
}

run {
    systemProperty "file.encoding", "UTF-8"
}

test {
    useJUnitPlatform()

    systemProperty "file.encoding", "UTF-8"
    minHeapSize = "256m"
    maxHeapSize = "1024m"
    failFast = false
    maxParallelForks = 1
}

testlogger {
    logLevel 'quiet'
    theme 'standard'
}
allure {
    autoconfigure = true
    version = "${allureVersion}"

    useJUnit5 {
        version = "${allureVersion}"
    }
}
repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-jetty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "org.jetbrains:kotlin-css-jvm:1.0.0-pre.31-kotlin-1.2.41"
    implementation "io.ktor:ktor-freemarker:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-okhttp:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    implementation('com.codeborne:selenide:5.16.2')
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}")
    implementation('io.github.bonigarcia:webdrivermanager:4.2.0')
    testImplementation('org.assertj:assertj-core:3.17.1')
    testImplementation('org.slf4j:slf4j-simple:1.7.29')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVersion}")
}
